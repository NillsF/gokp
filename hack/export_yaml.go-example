package main

import (
	"context"
	"flag"
	"fmt"
	"os"

	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/serializer/json"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/clientcmd"
	"k8s.io/kubectl/pkg/scheme"
)

func main() {
	file, err := os.Create("/tmp/chx.yaml")
	if err != nil {
		panic(err)
	}
	defer file.Close()

	var kubeConfig = flag.String("kubeconfig", "", "kubeconfig file")
	flag.Parse()

	client, err := newClient(*kubeConfig)
	if err != nil {
		fmt.Printf("[ERROR] Failed to create client: %s\n", err)
		os.Exit(1)
	}

	namespace := "test"
	deploymentName := "nginx"

	deployment, err := client.AppsV1().Deployments(namespace).Get(context.TODO(), deploymentName, metav1.GetOptions{})
	//chx trying to clean stuff up
	deployment.SetResourceVersion("")
	deployment.SetUID("")
	deployment.SetAnnotations(map[string]string{})
	deployment.CreationTimestamp.Reset()
	deployment.SetSelfLink("")
	deployment.SetManagedFields([]metav1.ManagedFieldsEntry{})
	deployment.SetFinalizers([]string{})
	deployment.SetOwnerReferences([]metav1.OwnerReference{})
	deployment.SetGeneration(0)
	deployment.Status.Reset()

	// other stuff we may not want. This is specific for deployments though. The above
	// is the "generic" way based on my "export" plugin https://gist.github.com/christianh814/41e65c6e5519af34da0efda970bca70e
	deployment.Spec.Strategy.Reset()
	deployment.Spec.ProgressDeadlineSeconds = nil
	deployment.Spec.RevisionHistoryLimit = nil

	// scorched earth
	//deployment.Reset()

	// In case you want to keep specific annotations, there is this
	/*
		for k := range deployment.Annotations {
			delete(deployment.Annotations, k)
		}
	*/

	///

	if errors.IsNotFound(err) {
		fmt.Printf("Deployment %s in namespace %s not found\n", deploymentName, namespace)
	} else if err != nil {
		panic(err.Error())
	} else {
		addTypeInformationToObject(deployment)
		e := json.NewYAMLSerializer(json.DefaultMetaFactory, nil, nil)

		err := e.Encode(deployment, file)

		if err != nil {
			panic(err.Error())
		}
	}

	// trying api resources
	//apiresources, err := client.Discovery().ServerResources()
	// This grabs
	//apiresources, err := client.Discovery().ServerPreferredNamespacedResources()
	//apiresources, err := client.Discovery().ServerPreferredResources()
	apiresources, err := client.Discovery().ServerResources()
	if err != nil {
		panic(err)
	}
	for _, a := range apiresources {
		for _, b := range a.APIResources {
			fmt.Println(b.Name)
		}
	}

}

func newClient(kubeConfigPath string) (kubernetes.Interface, error) {
	if kubeConfigPath == "" {
		kubeConfigPath = os.Getenv("KUBECONFIG")
	}
	if kubeConfigPath == "" {
		kubeConfigPath = clientcmd.RecommendedHomeFile // use default path(.kube/config)
	}
	kubeConfig, err := clientcmd.BuildConfigFromFlags("", kubeConfigPath)
	if err != nil {
		return nil, err
	}
	return kubernetes.NewForConfig(kubeConfig)
}

func addTypeInformationToObject(obj runtime.Object) error {
	gvks, _, err := scheme.Scheme.ObjectKinds(obj)
	if err != nil {
		return fmt.Errorf("missing apiVersion or kind and cannot assign it; %w", err)
	}

	for _, gvk := range gvks {
		if len(gvk.Kind) == 0 {
			continue
		}
		if len(gvk.Version) == 0 || gvk.Version == runtime.APIVersionInternal {
			continue
		}
		obj.GetObjectKind().SetGroupVersionKind(gvk)
		break
	}

	return nil
}
